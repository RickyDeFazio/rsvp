{"version":3,"sources":["Header/GuestInputForm.js","Header/index.js","MainContent/ConfirmedFilter.js","MainContent/GuestList/GuestName.js","MainContent/GuestList/Guest.js","MainContent/GuestList/PendingGuest.js","MainContent/GuestList/index.js","MainContent/Counter.js","MainContent/index.js","App.js","registerServiceWorker.js","index.js"],"names":["GuestInputForm","props","onSubmit","newGuestSubmitHandler","type","onChange","handleNameInput","value","pendingGuest","placeholder","name","Header","ConfirmedFilter","toggleFilter","checked","isFiltered","GuestName","isEditing","children","handleNameEdits","Guest","e","setName","target","isConfirmed","handleConfirmation","onClick","handleToggleEditing","handleRemove","PendingGuest","className","GuestList","guests","filter","guest","map","index","key","toggleConfirmation","id","toggleEditing","text","removeGuest","Counter","numberAttending","numberUnconfirmed","totalInvited","MainContent","App","state","lastGuestId","newGuestId","toggleGuestProperty","property","setState","preventDefault","getTotalInvited","length","getAttendingGuests","reduce","total","this","JSON","parse","localStorage","getItem","setItem","stringify","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"kQAoBeA,EAjBQ,SAAAC,GAAK,OAC1B,0BAAMC,SAAUD,EAAME,uBACpB,2BACEC,KAAK,OACLC,SAAUJ,EAAMK,gBAChBC,MAAON,EAAMO,aACbC,YAAY,mBAEd,4BAAQL,KAAK,SAASM,KAAK,SAASH,MAAM,UAA1C,YCWWI,EAjBA,SAAAV,GAAK,OAClB,gCACE,oCACA,gDACA,kBAAC,EAAD,CACEE,sBAAuBF,EAAME,sBAC7BK,aAAcP,EAAMO,aACpBF,gBAAiBL,EAAMK,oBCSdM,EAlBS,SAAAX,GAAK,OAC3B,6BACE,wCACA,+BACE,2BACEG,KAAK,WACLC,SAAUJ,EAAMY,aAChBC,QAASb,EAAMc,aACd,IALL,sCCmBWC,EAtBG,SAAAf,GAChB,OAAIA,EAAMgB,UAEN,2BACEb,KAAK,OACLG,MAAON,EAAMiB,SACbb,SAAUJ,EAAMkB,kBAKpB,8BACGlB,EAAMiB,WCuBEE,EAjCD,SAAAnB,GAAK,OACjB,4BACE,kBAAC,EAAD,CACEgB,UAAWhB,EAAMgB,UACjBE,gBAAiB,SAAAE,GAAC,OAAIpB,EAAMqB,QAAQD,EAAEE,OAAOhB,SAE5CN,EAAMS,MAET,+BACE,2BACEN,KAAK,WACLU,QAASb,EAAMuB,YACfnB,SAAUJ,EAAMwB,qBACf,IALL,aAQA,4BAAQC,QAASzB,EAAM0B,qBACpB1B,EAAMgB,UAAY,OAAS,QAE9B,4BAAQS,QAASzB,EAAM2B,cAAvB,YCJWC,EAjBM,SAAA5B,GACnB,OAAIA,EAAMS,KAEN,wBAAIoB,UAAU,WACZ,8BACG7B,EAAMS,OAKR,MCuBMqB,EA9BG,SAAA9B,GAAK,OACrB,4BACE,kBAAC,EAAD,CAAcS,KAAMT,EAAMO,eACzBP,EAAM+B,OACJC,QAAO,SAAAC,GAAK,OAAKjC,EAAMc,YAAcmB,EAAMV,eAC3CW,KAAI,SAACD,EAAOE,GAAR,OACH,kBAAC,EAAD,CACEC,IAAKD,EACL1B,KAAMwB,EAAMxB,KACZc,YAAaU,EAAMV,YACnBP,UAAWiB,EAAMjB,UACjBQ,mBAAoB,kBAAMxB,EAAMqC,mBAAmBJ,EAAMK,KACzDZ,oBAAqB,kBAAM1B,EAAMuC,cAAcN,EAAMK,KACrDjB,QAAS,SAAAmB,GAAI,OAAIxC,EAAMqB,QAAQmB,EAAMP,EAAMK,KAC3CX,aAAc,kBAAM3B,EAAMyC,YAAYR,EAAMK,YCOvCI,EAxBC,SAAA1C,GAAK,OACnB,2BAAO6B,UAAU,WACf,+BACE,4BACE,0CACA,4BAAK7B,EAAM2C,kBAEb,4BACE,4CACA,4BAAK3C,EAAM4C,oBAEb,4BACE,sCACA,4BAAK5C,EAAM6C,kBC0BJC,EAnCK,SAAA9C,GAAK,OACvB,yBAAK6B,UAAU,QACb,kBAAC,EAAD,CACEjB,aAAcZ,EAAMY,aACpBE,WAAYd,EAAMc,aAEpB,kBAAC,EAAD,CACE+B,aAAc7C,EAAM6C,aACpBF,gBAAiB3C,EAAM2C,gBACvBC,kBAAmB5C,EAAM4C,oBAC3B,kBAAC,EAAD,CACEb,OAAQ/B,EAAM+B,OACdM,mBAAoBrC,EAAMqC,mBAC1BE,cAAevC,EAAMuC,cACrBlB,QAASrB,EAAMqB,QACfP,WAAYd,EAAMc,WAClB2B,YAAazC,EAAMyC,YACnBlC,aAAcP,EAAMO,iBCiGXwC,E,2MApHbC,MAAQ,CACNlC,YAAY,EACZP,aAAc,GACdwB,OAAQ,I,EAWVkB,YAAc,E,EAEdC,WAAa,WACX,IAAMZ,EAAK,EAAKW,YAEhB,OADA,EAAKA,aAAe,EACbX,G,EAGTa,oBAAsB,SAACC,EAAUd,GAAX,OACpB,EAAKe,SAAS,CACZtB,OAAQ,EAAKiB,MAAMjB,OAAOG,KAAI,SAAAD,GAC5B,OAAIK,IAAOL,EAAMK,GACR,eACFL,EADL,eAEGmB,GAAYnB,EAAMmB,KAGhBnB,Q,EAIbI,mBAAqB,SAAAC,GAAE,OAAI,EAAKa,oBAAoB,cAAeb,I,EAEnEG,YAAc,SAAAH,GAAE,OACd,EAAKe,SAAS,CACZtB,OAAQ,EAAKiB,MAAMjB,OAAOC,QAAO,SAAAC,GAAK,OAAIK,IAAOL,EAAMK,S,EAG3DC,cAAgB,SAAAD,GAAE,OAAI,EAAKa,oBAAoB,YAAab,I,EAE5DjB,QAAU,SAACZ,EAAM6B,GAAP,OACR,EAAKe,SAAS,CACZtB,OAAQ,EAAKiB,MAAMjB,OAAOG,KAAI,SAAAD,GAC5B,OAAIK,IAAOL,EAAMK,GACR,eACFL,EADL,CAEExB,SAGGwB,Q,EAIbrB,aAAe,kBAAM,EAAKyC,SAAS,CAAEvC,YAAa,EAAKkC,MAAMlC,c,EAE7DT,gBAAkB,SAAAe,GAAC,OAAI,EAAKiC,SAAS,CAAE9C,aAAca,EAAEE,OAAOhB,S,EAE9DJ,sBAAwB,SAAAkB,GACtBA,EAAEkC,iBACF,IAAMhB,EAAK,EAAKY,aAChB,EAAKG,SAAS,CACZtB,OAAO,CACL,CACEtB,KAAM,EAAKuC,MAAMzC,aACjBgB,aAAa,EACbP,WAAW,EACXsB,OALE,mBAOD,EAAKU,MAAMjB,SAEhBxB,aAAc,M,EAIlBgD,gBAAkB,kBAAM,EAAKP,MAAMjB,OAAOyB,Q,EAE1CC,mBAAqB,kBACnB,EAAKT,MAAMjB,OAAO2B,QAChB,SAACC,EAAO1B,GAAR,OAAmBA,EAAMV,YAAcoC,EAAQ,EAAIA,IACnD,I,mFA5EFC,KAAKP,SAASQ,KAAKC,MAAMC,aAAaC,QAAQ,a,2CAI9CD,aAAaE,QAAQ,QAASJ,KAAKK,UAAUN,KAAKZ,U,+BA4ElD,IAAMH,EAAee,KAAKL,kBACpBZ,EAAkBiB,KAAKH,qBACvBb,EAAoBC,EAAeF,EAEzC,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,CACE3B,sBAAuB0D,KAAK1D,sBAC5BK,aAAcqD,KAAKZ,MAAMzC,aACzBF,gBAAiBuD,KAAKvD,kBAExB,kBAAC,EAAD,CACEO,aAAcgD,KAAKhD,aACnBE,WAAY8C,KAAKZ,MAAMlC,WACvB+B,aAAcA,EACdF,gBAAiBA,EACjBC,kBAAmBA,EACnBb,OAAQ6B,KAAKZ,MAAMjB,OACnBM,mBAAoBuB,KAAKvB,mBACzBE,cAAeqB,KAAKrB,cACpBlB,QAASuC,KAAKvC,QACdoB,YAAamB,KAAKnB,YAClBlC,aAAcqD,KAAKZ,MAAMzC,oB,GA9GjB4D,aCMZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlC,QACf4B,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,QAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,QAAN,sBAEN3B,EAwCX,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEAzDAoB,CAAwBhC,GAHxBD,EAAgBC,OC7BxBiC,K","file":"static/js/main.ecfa459d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst GuestInputForm = props =>\r\n  <form onSubmit={props.newGuestSubmitHandler}>\r\n    <input\r\n      type=\"text\"\r\n      onChange={props.handleNameInput}\r\n      value={props.pendingGuest}\r\n      placeholder=\"Invite Someone\"\r\n    />\r\n    <button type=\"submit\" name=\"submit\" value=\"submit\">Submit</button>\r\n  </form>;\r\n\r\nGuestInputForm.propTypes = {\r\n  newGuestSubmitHandler: PropTypes.func.isRequired,\r\n  pendingGuest: PropTypes.string.isRequired,\r\n  handleNameInput: PropTypes.func.isRequired\r\n};\r\n\r\nexport default GuestInputForm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport GuestInputForm from './GuestInputForm';\r\n\r\nconst Header = props =>\r\n  <header>\r\n    <h1>RSVP</h1>\r\n    <p>A Reservation App</p>\r\n    <GuestInputForm\r\n      newGuestSubmitHandler={props.newGuestSubmitHandler}\r\n      pendingGuest={props.pendingGuest}\r\n      handleNameInput={props.handleNameInput}\r\n    />\r\n  </header>;\r\n\r\nHeader.propTypes = {\r\n  newGuestSubmitHandler: PropTypes.func.isRequired,\r\n  pendingGuest: PropTypes.string.isRequired,\r\n  handleNameInput: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ConfirmedFilter = props =>\r\n  <div>\r\n    <h2>Invitees</h2>\r\n    <label>\r\n      <input\r\n        type=\"checkbox\"\r\n        onChange={props.toggleFilter}\r\n        checked={props.isFiltered}\r\n      />{\" \"}\r\n      Hide those who haven't responded\r\n    </label>\r\n  </div>;\r\n\r\nConfirmedFilter.propTypes = {\r\n  toggleFilter: PropTypes.func.isRequired,\r\n  isFiltered: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default ConfirmedFilter;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GuestName = props => {\r\n  if (props.isEditing) {\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        value={props.children}\r\n        onChange={props.handleNameEdits} />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {props.children}\r\n    </span>\r\n  );\r\n};\r\n\r\nGuestName.propTypes = {\r\n  isEditing: PropTypes.bool.isRequired,\r\n  handleNameEdits: PropTypes.func.isRequired\r\n};\r\n\r\nexport default GuestName;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport GuestName from './GuestName';\r\n\r\nconst Guest = props => (\r\n  <li>\r\n    <GuestName\r\n      isEditing={props.isEditing}\r\n      handleNameEdits={e => props.setName(e.target.value)}\r\n    >\r\n      {props.name}\r\n    </GuestName>\r\n    <label>\r\n      <input\r\n        type='checkbox'\r\n        checked={props.isConfirmed}\r\n        onChange={props.handleConfirmation}\r\n      />{' '}\r\n      Confirmed\r\n    </label>\r\n    <button onClick={props.handleToggleEditing}>\r\n      {props.isEditing ? 'save' : 'edit'}\r\n    </button>\r\n    <button onClick={props.handleRemove}>remove</button>\r\n  </li>\r\n);\r\n\r\nGuest.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  isConfirmed: PropTypes.bool.isRequired,\r\n  isEditing: PropTypes.bool.isRequired,\r\n  handleConfirmation: PropTypes.func.isRequired,\r\n  handleToggleEditing: PropTypes.func.isRequired,\r\n  setName: PropTypes.func.isRequired,\r\n  handleRemove: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Guest;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PendingGuest = props => {\r\n  if (props.name) {\r\n    return (\r\n      <li className=\"pending\">\r\n        <span>\r\n          {props.name}\r\n        </span>\r\n      </li>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nPendingGuest.propTypes = {\r\n  name: PropTypes.string.isRequired\r\n};\r\n\r\nexport default PendingGuest;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Guest from './Guest';\r\nimport PendingGuest from './PendingGuest';\r\n\r\nconst GuestList = props => (\r\n  <ul>\r\n    <PendingGuest name={props.pendingGuest} />\r\n    {props.guests\r\n      .filter(guest => !props.isFiltered || guest.isConfirmed)\r\n      .map((guest, index) => (\r\n        <Guest\r\n          key={index}\r\n          name={guest.name}\r\n          isConfirmed={guest.isConfirmed}\r\n          isEditing={guest.isEditing}\r\n          handleConfirmation={() => props.toggleConfirmation(guest.id)}\r\n          handleToggleEditing={() => props.toggleEditing(guest.id)}\r\n          setName={text => props.setName(text, guest.id)}\r\n          handleRemove={() => props.removeGuest(guest.id)}\r\n        />\r\n      ))}\r\n  </ul>\r\n);\r\n\r\nGuestList.propTypes = {\r\n  guests: PropTypes.array.isRequired,\r\n  toggleConfirmation: PropTypes.func.isRequired,\r\n  toggleEditing: PropTypes.func.isRequired,\r\n  setName: PropTypes.func.isRequired,\r\n  isFiltered: PropTypes.bool.isRequired,\r\n  removeGuest: PropTypes.func.isRequired,\r\n  pendingGuest: PropTypes.string.isRequired\r\n};\r\n\r\nexport default GuestList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Counter = props =>\r\n  <table className=\"counter\">\r\n    <tbody>\r\n      <tr>\r\n        <td>Attending:</td>\r\n        <td>{props.numberAttending}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Unconfirmed:</td>\r\n        <td>{props.numberUnconfirmed}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Total:</td>\r\n        <td>{props.totalInvited}</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>;\r\n\r\nCounter.propTypes = {\r\n  numberAttending: PropTypes.number,\r\n  numberUnconfirmed: PropTypes.number,\r\n  totalInvited: PropTypes.number\r\n};\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport ConfirmedFilter from \"./ConfirmedFilter\";\r\nimport GuestList from \"./GuestList\";\r\nimport Counter from \"./Counter\";\r\n\r\nconst MainContent = props =>\r\n  <div className=\"main\">\r\n    <ConfirmedFilter\r\n      toggleFilter={props.toggleFilter}\r\n      isFiltered={props.isFiltered}\r\n    />\r\n    <Counter\r\n      totalInvited={props.totalInvited}\r\n      numberAttending={props.numberAttending}\r\n      numberUnconfirmed={props.numberUnconfirmed} />\r\n    <GuestList\r\n      guests={props.guests}\r\n      toggleConfirmation={props.toggleConfirmation}\r\n      toggleEditing={props.toggleEditing}\r\n      setName={props.setName}\r\n      isFiltered={props.isFiltered}\r\n      removeGuest={props.removeGuest}\r\n      pendingGuest={props.pendingGuest}\r\n    />\r\n  </div>;\r\n\r\nMainContent.propTypes = {\r\n  toggleFilter: PropTypes.func.isRequired,\r\n  isFiltered: PropTypes.bool.isRequired,\r\n  totalInvited: PropTypes.number.isRequired,\r\n  numberAttending: PropTypes.number.isRequired,\r\n  numberUnconfirmed: PropTypes.number.isRequired,\r\n  guests: PropTypes.array.isRequired,\r\n  toggleConfirmation: PropTypes.func.isRequired,\r\n  toggleEditing: PropTypes.func.isRequired,\r\n  setName: PropTypes.func.isRequired,\r\n  removeGuest: PropTypes.func.isRequired,\r\n  pendingGuest: PropTypes.string.isRequired\r\n};\r\n\r\nexport default MainContent;\r\n","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport MainContent from './MainContent';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isFiltered: false,\r\n    pendingGuest: '',\r\n    guests: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState(JSON.parse(localStorage.getItem('state')));\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    localStorage.setItem('state', JSON.stringify(this.state));\r\n  }\r\n\r\n  lastGuestId = 0;\r\n\r\n  newGuestId = () => {\r\n    const id = this.lastGuestId;\r\n    this.lastGuestId += 1;\r\n    return id;\r\n  };\r\n\r\n  toggleGuestProperty = (property, id) =>\r\n    this.setState({\r\n      guests: this.state.guests.map(guest => {\r\n        if (id === guest.id) {\r\n          return {\r\n            ...guest,\r\n            [property]: !guest[property]\r\n          };\r\n        }\r\n        return guest;\r\n      })\r\n    });\r\n\r\n  toggleConfirmation = id => this.toggleGuestProperty('isConfirmed', id);\r\n\r\n  removeGuest = id =>\r\n    this.setState({\r\n      guests: this.state.guests.filter(guest => id !== guest.id)\r\n    });\r\n\r\n  toggleEditing = id => this.toggleGuestProperty('isEditing', id);\r\n\r\n  setName = (name, id) =>\r\n    this.setState({\r\n      guests: this.state.guests.map(guest => {\r\n        if (id === guest.id) {\r\n          return {\r\n            ...guest,\r\n            name\r\n          };\r\n        }\r\n        return guest;\r\n      })\r\n    });\r\n\r\n  toggleFilter = () => this.setState({ isFiltered: !this.state.isFiltered });\r\n\r\n  handleNameInput = e => this.setState({ pendingGuest: e.target.value });\r\n\r\n  newGuestSubmitHandler = e => {\r\n    e.preventDefault();\r\n    const id = this.newGuestId();\r\n    this.setState({\r\n      guests: [\r\n        {\r\n          name: this.state.pendingGuest,\r\n          isConfirmed: false,\r\n          isEditing: false,\r\n          id\r\n        },\r\n        ...this.state.guests\r\n      ],\r\n      pendingGuest: ''\r\n    });\r\n  };\r\n\r\n  getTotalInvited = () => this.state.guests.length;\r\n\r\n  getAttendingGuests = () =>\r\n    this.state.guests.reduce(\r\n      (total, guest) => (guest.isConfirmed ? total + 1 : total),\r\n      0\r\n    );\r\n\r\n  render() {\r\n    const totalInvited = this.getTotalInvited();\r\n    const numberAttending = this.getAttendingGuests();\r\n    const numberUnconfirmed = totalInvited - numberAttending;\r\n\r\n    return (\r\n      <div className='App'>\r\n        <Header\r\n          newGuestSubmitHandler={this.newGuestSubmitHandler}\r\n          pendingGuest={this.state.pendingGuest}\r\n          handleNameInput={this.handleNameInput}\r\n        />\r\n        <MainContent\r\n          toggleFilter={this.toggleFilter}\r\n          isFiltered={this.state.isFiltered}\r\n          totalInvited={totalInvited}\r\n          numberAttending={numberAttending}\r\n          numberUnconfirmed={numberUnconfirmed}\r\n          guests={this.state.guests}\r\n          toggleConfirmation={this.toggleConfirmation}\r\n          toggleEditing={this.toggleEditing}\r\n          setName={this.setName}\r\n          removeGuest={this.removeGuest}\r\n          pendingGuest={this.state.pendingGuest}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}